POST https://localhost:8080/ketch/endpoint
Content-Type: application/json
Authorization: Basic user1 password1

{
  "apiVersion":"dsr/v1",
  "kind":"DeleteRequest",
  "metadata": {
    "uid":"D6EFAECD-2FCB-486D-B49A-4F699BFC24D1",
    "tenant":"axonic"
  },
  "request": {
    "jurisdiction": "CCPA",
    "regulation": "CCPA",
    "identities": [
      {
        "identitySpace": "axonicID",
        "identityValue": "00015c60-37c5-11e9-83e4-0e7679b64802"
      }
    ],
    "subject": {
      "firstName": "JOE",
      "lastName": "SMITH",
      "phone": "7207822125",
      "email": "abc@noemail.com",
      "addressLine1": "9999 MAIN CIR",
      "addressLine2": "APT 34",
      "city": "ENGLEWOOD",
      "stateRegionCode": "CO",
      "postalCode": "80112-1234"
    },
    "claims": {
    }
  }
}

> {%
client.test("Request returned error status", function() {
  client.assert(response.status === 503, "Response status is not 503");
});
client.test("Response returns JSON", function() {
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
});
client.test("Response returns Ketch format", function() {
  client.assert(response.body.hasOwnProperty("apiVersion"), "Cannot find 'apiVersion' option in response");
  client.assert(response.body.apiVersion === 'dsr/v1', "Wrong 'apiVersion'");
  client.assert(response.body.hasOwnProperty("kind"), "Cannot find 'kind' option in response");
  client.assert(response.body.kind === 'Error', "Wrong 'kind'");
  client.assert(response.body.hasOwnProperty("metadata"), "Cannot find 'metadata' option in response");
  client.assert(response.body.metadata.uid === 'D6EFAECD-2FCB-486D-B49A-4F699BFC24D1', "Wrong 'uid'");
  client.assert(response.body.metadata.tenant === 'axonic', "Wrong 'tenant'");
  client.assert(response.body.hasOwnProperty("error"), "Cannot find 'error' option in response");
  client.assert(response.body.error.code === 503, "Wrong 'error.code'");
  client.assert(response.body.error.status === 'unavailable', "Wrong 'error.status'");
});
%}
